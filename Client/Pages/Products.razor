@page "/products"
@using BlazorCRUDApp.Shared.Dtos
@using BlazorCRUDApp.Client.Services
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager Navigation

<h3>Product List</h3>

@if (products == null || categories == null)
{
    <p>Loading...</p>
}
else
{
    <DropDown @ref="childRef" Products="products" Categories="categories" >

    @if (childRef != null)
    {
        foreach (var product in childRef.GetFilteredItems())
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>@product.CategoryName</td>
                <td>
                    <button class="btn btn-primary btn-sm me-1" @onclick="() => EditProductHandler(product.Id)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteProductHandler(product)">Delete</button>
                </td>
            </tr>
        }
    }
    </DropDown>
}
<CreateProduct OnProductCreated="CreateProductHandler" />

@code {
    private List<ProductDto> products = new();
    private List<CategoryDto> categories = new();
    private RenderFragment<ProductDto> rowTemplate;
    private DropDown? childRef;

    protected override async Task OnInitializedAsync()
    {
        await CreateProductHandler();
    }
    private async Task CreateProductHandler()
    {
        // childRef?.FilteredItems?.Invoke();
        try
        {
            var productResult = await ProductService.GetAllProductsAsync();
            var categoryResult = await CategoryService.GetAllCategoriesAsync();

            if (productResult.Success)
                products = productResult.Data;

            if (categoryResult.Success)
            {
                categories = categoryResult.Data;
                categories.Insert(0, new CategoryDto { Name = "All" });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task DeleteProductHandler(ProductDto product)
    {
        await ProductService.DeleteProductAsync(product.Id);
        await CreateProductHandler(); // Refresh the product list after deletion
    }

    private void EditProductHandler(int id)
    {
        Navigation.NavigateTo($"/edit-product/{id}");
    }
}
